plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.8.20"
    id "org.jetbrains.intellij" version "1.13.3"
}

def javaVersion = "11"
def pluginSinceBuild = "203.5981.155"
def pluginUntilBuild = ""
def pluginVersion = "1.3.0"

group = "com.vladsch.PluginDevelopersToolbox"
version = pluginVersion

repositories {
    mavenLocal()
    mavenCentral()
}

// Configure Gradle IntelliJ Plugin
// Read more: https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html
intellij {
    version = "2020.3.4"
    type = "IC" // Target IDE Platform
    
    plugins = []
    downloadSources = false
}

dependencies {
    annotationProcessor("junit:junit:4.13.2")
    testImplementation("junit:junit:4.13.2")
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
            resources.srcDirs  = ["resources"]
        }
                                             c
        kotlin {
            srcDirs = ["src"]
        }
    }

    test {
        java {
            srcDirs = ["test"]
        }

        kotlin {
            srcDirs = ["test"]
        }
    }

}

// Set the JVM compatibility versions
compileJava {
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

tasks { 
    
    buildSearchableOptions {
        enabled = true
    }

    processResources {

    }

    patchPluginXml {
        sinceBuild.set(pluginSinceBuild)
        untilBuild.set(pluginUntilBuild)
        version.set(pluginVersion)
    }

    buildPlugin {

    }

    runPluginVerifier {

    }

    signPlugin {
        certificateChain.set(System.getenv("CERTIFICATE_CHAIN"))
        privateKey.set(System.getenv("PRIVATE_KEY"))
        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    }

    publishPlugin {
        token.set(System.getenv("PUBLISH_TOKEN"))
    }
}
